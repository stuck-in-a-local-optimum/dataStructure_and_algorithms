// { Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int V = sc.nextInt();
            int E = sc.nextInt();
            for (int i = 0; i < V + 1; i++)
                list.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
            }
            if (new Solution().isCyclic(V, list) == true)
                System.out.println("1");
            else
                System.out.println("0");
        }
    }
}// } Driver Code Ends


/*Complete the function below*/

class Solution {
    // Function to detect cycle in a directed graph.
    
    private boolean checkCycleDFS(int node,ArrayList<ArrayList<Integer> > adj, boolean[] visited, boolean[] dfsVisited){
        visited[node] =true;
        dfsVisited[node] = true;
        
        
        for(Integer nbr : adj.get(node)){
            if(visited[nbr]==false){
                if(checkCycleDFS(nbr, adj, visited, dfsVisited)){
                    return true;
                }
            }
            else{
                if(dfsVisited[nbr]==true){
                    return true;
                }
            }
        }
        
        dfsVisited[node] = false;
        return false;
        
    }
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean[] visited =new boolean[V];
        boolean[] dfsVisited = new boolean[V];
        
        for(int node=0; node<V; node++){
            if(visited[node]==false){
                if(checkCycleDFS(node, adj, visited, dfsVisited)){
                    return true;
                }
            }
        }
        
        return false;
    }
}
